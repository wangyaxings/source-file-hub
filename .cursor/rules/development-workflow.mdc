---
description: 开发工作流程和最佳实践
---

# 开发工作流程

## 项目启动
- **开发模式**: 使用 `startup.bat` 选择开发模式
- **Docker模式**: 使用 `docker-compose up -d`
- **前端**: `cd frontend && yarn dev`
- **后端**: `go run cmd/server/main.go`

## 代码组织
- **后端**: 遵循清洁架构，按层组织代码
- **前端**: 使用 Next.js App Router，组件化开发
- **配置**: 环境变量和配置文件分离
- **测试**: 单元测试和集成测试并存

## 数据库操作
- **开发**: 使用 SQLite 数据库
- **迁移**: 通过 [internal/migration/](mdc:internal/migration/) 管理
- **测试**: 使用内存数据库或测试数据库

## 认证开发
- **会话管理**: 使用 Authboss 处理认证
- **2FA**: TOTP 实现，兼容 Google Authenticator
- **权限**: 基于 Casbin 的 RBAC 模型

## 前端开发
- **组件**: 使用 Radix UI + Tailwind CSS
- **状态**: React hooks 管理状态
- **API**: 统一的 API 客户端
- **类型**: 完整的 TypeScript 类型定义

## 测试策略
- **后端**: Go 测试框架，覆盖核心业务逻辑
- **前端**: Jest + React Testing Library
- **集成**: API 集成测试
- **E2E**: Playwright 端到端测试

## 部署流程
- **开发**: 本地开发环境
- **测试**: Docker 容器化测试
- **生产**: Docker Compose 部署
- **监控**: 结构化日志和健康检查

## 代码质量
- **格式化**: gofmt (Go) + Prettier (前端)
- **检查**: golint (Go) + ESLint (前端)
- **类型**: 严格的 TypeScript 配置
- **文档**: 代码注释和 API 文档

## 安全实践
- **HTTPS**: 强制使用 HTTPS
- **认证**: 会话认证 + 2FA
- **授权**: 基于角色的访问控制
- **日志**: 详细的安全事件日志
- **验证**: 输入验证和清理