---
globs: *.go
---

# Go 编码规范

## 代码风格
- 使用 `gofmt` 格式化代码
- 遵循 Go 官方代码风格指南
- 使用有意义的变量和函数名
- 函数和结构体使用 PascalCase，变量使用 camelCase

## 错误处理
- 始终检查并处理错误
- 使用 `fmt.Errorf` 包装错误信息
- 在日志中记录错误详情：
```go
if l := logger.GetLogger(); l != nil {
    l.ErrorCtx(logger.EventError, "operation_failed",
        map[string]interface{}{"error": err.Error()},
        "ERROR_CODE", r.Context().Value(middleware.RequestIDKey), getActor(r))
}
```

## HTTP 响应
- 使用统一的响应结构：
```go
type Response struct {
    Success bool        `json:"success"`
    Message string      `json:"message,omitempty"`
    Data    interface{} `json:"data,omitempty"`
    Error   string      `json:"error,omitempty"`
    Code    string      `json:"code,omitempty"`
    Details map[string]interface{} `json:"details,omitempty"`
}
```

## 中间件使用
- 认证中间件：`middleware.RequireAuthorization(handler)`
- 权限检查：`middleware.Authorize()`
- 请求ID：`r.Context().Value(middleware.RequestIDKey)`

## 数据库操作
- 使用依赖注入的控制器模式
- 通过 `database.GetDatabase()` 获取数据库实例
- 使用事务处理复杂操作

## 日志记录
- 使用结构化日志：`logger.GetLogger()`
- 包含请求ID和用户信息
- 记录关键操作和错误