version: '3.8'

# Production Docker Compose configuration
# This example shows how to deploy with external volumes

services:
  # Backend service
  fileserver-backend:
    image: ghcr.io/your-org/fileserver:latest  # Replace with your actual image
    ports:
      - "8443:8443"
    volumes:
      # External volumes for persistent data
      - /var/lib/fileserver/data:/app/data           # Database and logs
      - /var/lib/fileserver/uploads:/app/downloads   # Uploaded files
      - /etc/fileserver/configs:/app/configs:ro      # Configuration files (read-only)
      - /etc/ssl/fileserver:/app/certs:ro            # SSL certificates (read-only)
    environment:
      - GO_ENV=production
      - DB_PATH=/app/data/fileserver.db
    restart: unless-stopped
    networks:
      - fileserver-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend service (optional - if using separate frontend)
  fileserver-frontend:
    image: ghcr.io/your-org/fileserver-frontend:latest  # Replace with your actual image
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://fileserver-backend:8443
    depends_on:
      - fileserver-backend
    restart: unless-stopped
    networks:
      - fileserver-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Reverse proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /etc/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/ssl/fileserver:/etc/nginx/certs:ro
    depends_on:
      - fileserver-frontend
      - fileserver-backend
    restart: unless-stopped
    networks:
      - fileserver-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  fileserver-network:
    driver: bridge

# Note: In production, you should create the volumes manually or use
# external volume drivers for better control over data persistence