name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

env:
  GO_VERSION: '1.21'

jobs:
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            output: fileserver-linux-amd64
          - goos: windows
            goarch: amd64
            output: fileserver-windows-amd64.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies (Linux)
      if: matrix.goos == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-multilib

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 1
      run: |
        if [ "${{ matrix.goos }}" = "windows" ]; then
          # For Windows, we need cross-compilation setup
          sudo apt-get install -y gcc-mingw-w64
          export CC=x86_64-w64-mingw32-gcc
        fi
        go build -v -ldflags="-s -w -X main.version=${{ github.ref_name }}" -o ${{ matrix.output }} cmd/server/main.go

    - name: Create release directory
      run: mkdir -p releases

    - name: Package Linux binary
      if: matrix.goos == 'linux'
      run: |
        cp ${{ matrix.output }} releases/
        cp README.md releases/
        cp -r configs releases/
        cp -r downloads releases/
        mkdir -p releases/certs
        cd releases
        tar -czf fileserver-linux-amd64.tar.gz fileserver-linux-amd64 README.md configs/ downloads/ certs/
        ls -la

    - name: Package Windows binary
      if: matrix.goos == 'windows'
      run: |
        cp ${{ matrix.output }} releases/
        cp README.md releases/
        cp -r configs releases/
        cp -r downloads releases/
        mkdir -p releases/certs
        cd releases
        zip -r fileserver-windows-amd64.zip fileserver-windows-amd64.exe README.md configs/ downloads/ certs/
        ls -la

    - name: Upload Linux artifact
      if: matrix.goos == 'linux'
      uses: actions/upload-artifact@v4
      with:
        name: fileserver-linux-amd64
        path: releases/fileserver-linux-amd64.tar.gz

    - name: Upload Windows artifact
      if: matrix.goos == 'windows'
      uses: actions/upload-artifact@v4
      with:
        name: fileserver-windows-amd64
        path: releases/fileserver-windows-amd64.zip

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Display structure of downloaded files
      run: ls -la artifacts/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/fileserver-linux-amd64/fileserver-linux-amd64.tar.gz
          artifacts/fileserver-windows-amd64/fileserver-windows-amd64.zip
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## Secure File Hub ${{ github.ref_name }}

          ### üì¶ Downloads
          - **Linux (AMD64)**: `fileserver-linux-amd64.tar.gz`
          - **Windows (AMD64)**: `fileserver-windows-amd64.zip`

          ### üöÄ Quick Start

          #### Linux:
          ```bash
          tar -xzf fileserver-linux-amd64.tar.gz
          cd fileserver-linux-amd64
          ./fileserver-linux-amd64
          ```

          #### Windows:
          ```cmd
          unzip fileserver-windows-amd64.zip
          cd fileserver-windows-amd64
          fileserver-windows-amd64.exe
          ```

          ### üîê SSL Certificates
          Generate SSL certificates before first run:
          ```bash
          go run scripts/generate_cert.go
          ```

          ### üìñ Documentation
          See README.md for complete setup and API documentation.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}