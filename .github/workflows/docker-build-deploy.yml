name: Docker Build and Deploy

on:
  push:
    branches: [ 0912, main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ 0912, main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 构建和推送 Docker 镜像
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        target: runtime

    - name: Generate deployment info
      id: deploy-info
      run: |
        echo "image_tag=${{ steps.meta.outputs.tags }}" >> $GITHUB_OUTPUT
        echo "registry=${{ env.REGISTRY }}" >> $GITHUB_OUTPUT
        echo "image_name=${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT
        echo "deployment_time=$(date -u +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

    - name: Upload deployment info
      uses: actions/upload-artifact@v4
      with:
        name: deployment-info
        path: |
          ${{ steps.deploy-info.outputs.image_tag }}
        retention-days: 30

  # 部署到服务器
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/0912' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download deployment info
      uses: actions/download-artifact@v4
      with:
        name: deployment-info

    - name: Setup deployment environment
      run: |
        # 创建部署目录结构
        mkdir -p ~/secure-file-hub/{data,downloads,logs,configs,certs}

        # 设置目录权限
        chmod 755 ~/secure-file-hub/{data,downloads,logs,configs,certs}

        # 创建部署脚本
        cat > ~/secure-file-hub/deploy.sh << 'EOF'
        #!/bin/bash
        set -e

        echo "Starting Secure File Hub deployment..."

        # 停止现有容器
        if [ -f docker-compose.yml ]; then
            echo "Stopping existing containers..."
            docker-compose down || true
        fi

        # 拉取最新镜像
        echo "Pulling latest image..."
        docker pull $IMAGE_TAG

        # 启动服务
        echo "Starting services..."
        docker-compose up -d

        # 等待服务启动
        echo "Waiting for services to start..."
        sleep 30

        # 健康检查
        echo "Performing health check..."
        if curl -f -k https://localhost:8443/api/v1/health; then
            echo "✅ Backend health check passed"
        else
            echo "❌ Backend health check failed"
            exit 1
        fi

        if curl -f http://localhost:30000; then
            echo "✅ Frontend health check passed"
        else
            echo "❌ Frontend health check failed"
            exit 1
        fi

        echo "🎉 Deployment completed successfully!"
        EOF

        chmod +x ~/secure-file-hub/deploy.sh

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        port: ${{ secrets.DEPLOY_PORT || 22 }}
        script: |
          # 进入部署目录
          cd ~/secure-file-hub

          # 停止现有服务
          if [ -f docker-compose.yml ]; then
              echo "Stopping existing containers..."
              docker-compose down || true
          fi

          # 拉取最新镜像
          echo "Pulling latest image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

          # 创建必要的目录
          mkdir -p data downloads logs configs certs
          chmod 755 data downloads logs configs certs

          # 启动服务
          echo "Starting services..."
          docker-compose up -d

          # 等待服务启动
          echo "Waiting for services to start..."
          sleep 30

          # 健康检查
          echo "Performing health check..."
          if curl -f -k https://localhost:8443/api/v1/health; then
              echo "✅ Backend health check passed"
          else
              echo "❌ Backend health check failed"
              docker-compose logs
              exit 1
          fi

          if curl -f http://localhost:30000; then
              echo "✅ Frontend health check passed"
          else
              echo "❌ Frontend health check failed"
              docker-compose logs
              exit 1
          fi

          echo "🎉 Deployment completed successfully!"
          echo "Frontend: http://localhost:30000"
          echo "Backend API: https://localhost:8443"

  # 通知部署结果
  notify:
    needs: [build-and-push, deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Deployment successful!"
          echo "🚀 Secure File Hub is now running"
          echo "🌐 Frontend: http://localhost:30000"
          echo "🔧 Backend API: https://localhost:8443"
        else
          echo "❌ Deployment failed!"
          echo "Please check the logs for details"
        fi
